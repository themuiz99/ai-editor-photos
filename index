<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Photo Editor - แก้ไขรูปภาพด้วย AI</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700;800&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Nunito', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: linear-gradient(135deg, #fdf2f8 0%, #f3e8ff 50%, #dbeafe 100%);
            min-height: 100vh;
            color: #374151;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }
        
        /* Header */
        .header {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid #fce7f3;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        .header-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem 0;
        }
        
        .logo {
            width: 2.5rem;
            height: 2.5rem;
            background: linear-gradient(135deg, #ec4899, #8b5cf6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
        }
        
        .title {
            font-size: 1.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #ec4899, #8b5cf6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .subtitle {
            font-size: 0.875rem;
            color: #6b7280;
            margin-left: 0.5rem;
        }
        
        /* Hero Section */
        .hero {
            text-align: center;
            padding: 3rem 0;
        }
        
        .hero h2 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 1rem;
        }
        
        .hero p {
            font-size: 1.125rem;
            color: #6b7280;
            max-width: 42rem;
            margin: 0 auto;
        }
        
        /* Main Content */
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            max-width: 72rem;
            margin: 0 auto;
            padding-bottom: 2rem;
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }
        
        /* Card */
        .card {
            background: rgba(255, 255, 255, 0.5);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            padding: 1.5rem;
            border: 1px solid rgba(236, 72, 153, 0.2);
        }
        
        .card-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
            color: #ec4899;
            font-weight: 600;
        }
        
        .upload-card {
            border: 2px dashed #fce7f3;
            transition: all 0.3s ease;
        }
        
        .upload-card:hover {
            border-color: #f9a8d4;
        }
        
        /* Upload Area */
        .upload-area {
            border: 2px dashed #fce7f3;
            border-radius: 0.75rem;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        
        .upload-area:hover {
            border-color: #f9a8d4;
            background: rgba(252, 231, 243, 0.3);
        }
        
        .upload-area.dragover {
            border-color: #ec4899;
            background: rgba(252, 231, 243, 0.5);
        }
        
        .upload-icon {
            width: 4rem;
            height: 4rem;
            background: #fce7f3;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
            color: #ec4899;
            font-size: 2rem;
        }
        
        .upload-text {
            font-size: 1.125rem;
            font-weight: 500;
            color: #374151;
            margin-bottom: 0.5rem;
        }
        
        .upload-subtext {
            font-size: 0.875rem;
            color: #6b7280;
        }
        
        .uploaded-image {
            max-width: 100%;
            max-height: 16rem;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            margin-bottom: 1rem;
        }
        
        /* Textarea */
        .textarea {
            width: 100%;
            min-height: 8rem;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            resize: none;
            font-family: inherit;
            font-size: 0.875rem;
            transition: border-color 0.3s ease;
        }
        
        .textarea:focus {
            outline: none;
            border-color: #8b5cf6;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
        }
        
        /* Button */
        .btn {
            width: 100%;
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 0.75rem;
            font-weight: 500;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #ec4899, #8b5cf6);
            color: white;
            transform: scale(1);
        }
        
        .btn-primary:hover:not(:disabled) {
            transform: scale(1.05);
            box-shadow: 0 10px 25px rgba(139, 92, 246, 0.3);
        }
        
        .btn-primary:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: scale(1);
        }
        
        .btn-success {
            background: #10b981;
            color: white;
        }
        
        .btn-success:hover {
            background: #059669;
        }
        
        /* Loading Spinner */
        .spinner {
            width: 1rem;
            height: 1rem;
            border: 2px solid white;
            border-top: 2px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Result Section */
        .result-section {
            grid-column: 1 / -1;
            margin-top: 2rem;
        }
        
        .result-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
        
        @media (max-width: 768px) {
            .result-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .result-item {
            text-align: center;
        }
        
        .result-title {
            font-weight: 500;
            color: #374151;
            margin-bottom: 0.5rem;
        }
        
        .result-image {
            width: 100%;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
        }
        
        /* Features Section */
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 4rem;
            max-width: 64rem;
            margin-left: auto;
            margin-right: auto;
        }
        
        .feature-card {
            background: rgba(255, 255, 255, 0.5);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            padding: 1.5rem;
            text-align: center;
            border: 1px solid rgba(236, 72, 153, 0.2);
        }
        
        .feature-icon {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 1.5rem;
        }
        
        .feature-icon.pink {
            background: #fce7f3;
            color: #ec4899;
        }
        
        .feature-icon.purple {
            background: #f3e8ff;
            color: #8b5cf6;
        }
        
        .feature-icon.green {
            background: #d1fae5;
            color: #10b981;
        }
        
        .feature-title {
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }
        
        .feature-text {
            font-size: 0.875rem;
            color: #6b7280;
        }
        
        /* Footer */
        .footer {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            border-top: 1px solid #fce7f3;
            margin-top: 4rem;
            padding: 1.5rem 0;
            text-align: center;
            color: #6b7280;
        }
        
        /* Hidden Input */
        .hidden {
            display: none;
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .fade-in {
            animation: fadeIn 0.5s ease-out;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">✨</div>
                <h1 class="title">AI Photo Editor</h1>
                <span class="subtitle">แก้ไขรูปภาพด้วย AI</span>
            </div>
        </div>
    </header>

    <main class="container">
        <!-- Hero Section -->
        <section class="hero">
            <h2>✨ แก้ไขรูปภาพด้วยพลัง AI ✨</h2>
            <p>อัพโหลดรูปภาพของคุณ เขียนคำสั่งที่ต้องการ แล้วปล่อยให้ AI ช่วยแก้ไขรูปภาพให้สวยงามตามที่คุณต้องการ</p>
        </section>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Upload Section -->
            <div class="card upload-card">
                <div class="card-header">
                    <span>📤</span>
                    <span>อัพโหลดรูปภาพ</span>
                </div>
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">🖼️</div>
                    <div class="upload-text">ลากและวางรูปภาพที่นี่</div>
                    <div class="upload-subtext">หรือคลิกเพื่อเลือกไฟล์</div>
                </div>
                <input type="file" id="fileInput" class="hidden" accept="image/*">
            </div>

            <!-- Prompt Section -->
            <div class="card">
                <div class="card-header">
                    <span>🪄</span>
                    <span>คำสั่ง AI</span>
                </div>
                <textarea 
                    id="promptInput" 
                    class="textarea" 
                    placeholder="เขียนคำสั่งที่ต้องการให้ AI แก้ไขรูปภาพ เช่น 'เปลี่ยนพื้นหลังเป็นท้องฟ้าสีฟ้า' หรือ 'เพิ่มดอกไม้รอบๆ'"
                ></textarea>
                <button id="processBtn" class="btn btn-primary" style="margin-top: 1rem;" disabled>
                    <span>✨</span>
                    <span>เริ่มแก้ไขด้วย AI</span>
                </button>
            </div>
        </div>

        <!-- Result Section -->
        <div id="resultSection" class="result-section card" style="display: none;">
            <div class="card-header">
                <span>🖼️</span>
                <span>ผลลัพธ์</span>
            </div>
            <div class="result-grid">
                <div class="result-item">
                    <h3 class="result-title">รูปภาพต้นฉบับ</h3>
                    <img id="originalImage" class="result-image" alt="Original">
                </div>
                <div class="result-item">
                    <h3 class="result-title">รูปภาพที่แก้ไขแล้ว</h3>
                    <img id="editedImage" class="result-image" alt="Edited">
                    <button id="downloadBtn" class="btn btn-success" style="margin-top: 1rem;">
                        <span>💾</span>
                        <span>ดาวน์โหลดรูปภาพ</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Features Section -->
        <div class="features">
            <div class="feature-card">
                <div class="feature-icon pink">📤</div>
                <h3 class="feature-title">ง่ายต่อการใช้งาน</h3>
                <p class="feature-text">ลากและวางรูปภาพ หรือคลิกเพื่อเลือกไฟล์</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon purple">🪄</div>
                <h3 class="feature-title">AI ที่ทรงพลัง</h3>
                <p class="feature-text">เขียนคำสั่งเป็นภาษาไทยธรรมดา AI จะเข้าใจ</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon green">💾</div>
                <h3 class="feature-title">ดาวน์โหลดง่าย</h3>
                <p class="feature-text">บันทึกรูปภาพที่แก้ไขแล้วได้ทันที</p>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>สร้างด้วย ❤️ และพลัง AI • © 2025 AI Photo Editor</p>
        </div>
    </footer>

    <script>
        // Global variables
        let selectedImage = null;
        let editedImage = null;

        // DOM elements
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const promptInput = document.getElementById('promptInput');
        const processBtn = document.getElementById('processBtn');
        const resultSection = document.getElementById('resultSection');
        const originalImage = document.getElementById('originalImage');
        const editedImageEl = document.getElementById('editedImage');
        const downloadBtn = document.getElementById('downloadBtn');

        // Event listeners
        uploadArea.addEventListener('click', () => fileInput.click());
        uploadArea.addEventListener('dragover', handleDragOver);
        uploadArea.addEventListener('drop', handleDrop);
        uploadArea.addEventListener('dragenter', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });
        uploadArea.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
        });

        fileInput.addEventListener('change', handleFileSelect);
        promptInput.addEventListener('input', updateProcessButton);
        processBtn.addEventListener('click', processImage);
        downloadBtn.addEventListener('click', downloadImage);

        // Functions
        function handleDragOver(e) {
            e.preventDefault();
        }

        function handleDrop(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            
            const files = e.dataTransfer.files;
            if (files.length > 0 && files[0].type.startsWith('image/')) {
                handleFile(files[0]);
            }
        }

        function handleFileSelect(e) {
            const file = e.target.files[0];
            if (file) {
                handleFile(file);
            }
        }

        function handleFile(file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                selectedImage = e.target.result;
                updateUploadArea();
                updateProcessButton();
            };
            reader.readAsDataURL(file);
        }

        function updateUploadArea() {
            if (selectedImage) {
                uploadArea.innerHTML = `
                    <img src="${selectedImage}" class="uploaded-image" alt="Selected">
                    <p class="upload-subtext">คลิกเพื่อเปลี่ยนรูปภาพ</p>
                `;
            }
        }

        function updateProcessButton() {
            const hasImage = selectedImage !== null;
            const hasPrompt = promptInput.value.trim() !== '';
            processBtn.disabled = !(hasImage && hasPrompt);
        }

        async function processImage() {
            if (!selectedImage || !promptInput.value.trim()) return;

            processBtn.disabled = true;
            processBtn.innerHTML = `
                <div class="spinner"></div>
                <span>กำลังประมวลผล...</span>
            `;

            try {
                // Simulate AI processing
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // Apply simple effects based on prompt
                const processedImage = await applyImageEffects(selectedImage, promptInput.value);
                editedImage = processedImage;
                
                // Show results
                showResults();
                
            } catch (error) {
                console.error('Error processing image:', error);
                alert('เกิดข้อผิดพลาดในการประมวลผลรูปภาพ กรุณาลองใหม่อีกครั้ง');
            } finally {
                processBtn.disabled = false;
                processBtn.innerHTML = `
                    <span>✨</span>
                    <span>เริ่มแก้ไขด้วย AI</span>
                `;
                updateProcessButton();
            }
        }

        async function applyImageEffects(imageDataURL, prompt) {
            return new Promise((resolve) => {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const img = new Image();
                
                img.onload = () => {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    
                    // Draw original image
                    ctx.drawImage(img, 0, 0);
                    
                    // Apply effects based on prompt keywords
                    const lowerPrompt = prompt.toLowerCase();
                    
                    if (lowerPrompt.includes('สีฟ้า') || lowerPrompt.includes('blue') || lowerPrompt.includes('ท้องฟ้า')) {
                        // Add blue tint
                        ctx.globalCompositeOperation = 'multiply';
                        ctx.fillStyle = 'rgba(100, 150, 255, 0.3)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        ctx.globalCompositeOperation = 'source-over';
                    }
                    
                    if (lowerPrompt.includes('สีชมพู') || lowerPrompt.includes('pink')) {
                        // Add pink tint
                        ctx.globalCompositeOperation = 'multiply';
                        ctx.fillStyle = 'rgba(255, 150, 200, 0.3)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        ctx.globalCompositeOperation = 'source-over';
                    }
                    
                    if (lowerPrompt.includes('สว่าง') || lowerPrompt.includes('bright')) {
                        // Brighten image
                        ctx.globalCompositeOperation = 'screen';
                        ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        ctx.globalCompositeOperation = 'source-over';
                    }
                    
                    if (lowerPrompt.includes('มืด') || lowerPrompt.includes('dark')) {
                        // Darken image
                        ctx.globalCompositeOperation = 'multiply';
                        ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        ctx.globalCompositeOperation = 'source-over';
                    }

                    if (lowerPrompt.includes('เซเปีย') || lowerPrompt.includes('sepia') || lowerPrompt.includes('วินเทจ')) {
                        // Apply sepia effect
                        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                        const data = imageData.data;
                        
                        for (let i = 0; i < data.length; i += 4) {
                            const r = data[i];
                            const g = data[i + 1];
                            const b = data[i + 2];
                            
                            data[i] = Math.min(255, (r * 0.393) + (g * 0.769) + (b * 0.189));
                            data[i + 1] = Math.min(255, (r * 0.349) + (g * 0.686) + (b * 0.168));
                            data[i + 2] = Math.min(255, (r * 0.272) + (g * 0.534) + (b * 0.131));
                        }
                        
                        ctx.putImageData(imageData, 0, 0);
                    }
                    
                    // Add a subtle border effect for any edit
                    ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
                    ctx.lineWidth = 2;
                    ctx.strokeRect(1, 1, canvas.width - 2, canvas.height - 2);
                    
                    // Convert back to data URL
                    const processedDataURL = canvas.toDataURL('image/jpeg', 0.9);
                    resolve(processedDataURL);
                };
                
                img.src = imageDataURL;
            });
        }

        function showResults() {
            originalImage.src = selectedImage;
            editedImageEl.src = editedImage;
            resultSection.style.display = 'block';
            resultSection.classList.add('fade-in');
            
            // Scroll to results
            resultSection.scrollIntoView({ behavior: 'smooth' });
        }

        function downloadImage() {
            if (!editedImage) return;
            
            const link = document.createElement('a');
            link.href = editedImage;
            link.download = 'ai-edited-image.jpg';
            link.click();
        }

        // Initialize
        updateProcessButton();
    </script>
</body>
</html>
